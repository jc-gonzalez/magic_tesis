%!PS-Adobe-2.0 EPSF-2.0
%%Title: mirror_control.eps
%%Creator: fig2dev Version 3.2 Patchlevel 0-beta3
%%CreationDate: Tue Nov 30 16:17:32 1999
%%For: gonzalez@hegra9.mppmu.mpg.de (Jose Carlos Gonzalez)
%%Orientation: Portrait
%%BoundingBox: 0 0 241 568
%%Pages: 0
%%BeginSetup
%%EndSetup
%%Magnification: 1.0000
%%EndComments
/MyAppDict 100 dict dup begin def
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def
/col32 {0.886 0.886 0.886 srgb} bind def

end
save
-252.0 621.0 translate
1 -1 scale
.9 .9 scale % to make patterns same scale as in xfig

% This junk string is used by the show operators
/PATsstr 1 string def
/PATawidthshow { 	% cx cy cchar rx ry string
  % Loop over each character in the string
  {  % cx cy cchar rx ry char
    % Show the character
    dup				% cx cy cchar rx ry char char
    PATsstr dup 0 4 -1 roll put	% cx cy cchar rx ry char (char)
    false charpath		% cx cy cchar rx ry char
    /clip load PATdraw
    % Move past the character (charpath modified the
    % current point)
    currentpoint			% cx cy cchar rx ry char x y
    newpath
    moveto			% cx cy cchar rx ry char
    % Reposition by cx,cy if the character in the string is cchar
    3 index eq {			% cx cy cchar rx ry
      4 index 4 index rmoveto
    } if
    % Reposition all characters by rx ry
    2 copy rmoveto		% cx cy cchar rx ry
  } forall
  pop pop pop pop pop		% -
  currentpoint
  newpath
  moveto
} bind def
/PATcg {
  7 dict dup begin
    /lw currentlinewidth def
    /lc currentlinecap def
    /lj currentlinejoin def
    /ml currentmiterlimit def
    /ds [ currentdash ] def
    /cc [ currentrgbcolor ] def
    /cm matrix currentmatrix def
  end
} bind def
% PATdraw - calculates the boundaries of the object and
% fills it with the current pattern
/PATdraw {			% proc
  save exch
    PATpcalc			% proc nw nh px py
    5 -1 roll exec		% nw nh px py
    newpath
    PATfill			% -
  restore
} bind def
% PATfill - performs the tiling for the shape
/PATfill { % nw nh px py PATfill -
  PATDict /CurrentPattern get dup begin
    setfont
    % Set the coordinate system to Pattern Space
    PatternGState PATsg
    % Set the color for uncolored pattezns
    PaintType 2 eq { PATDict /PColor get PATsc } if
    % Create the string for showing
    3 index string		% nw nh px py str
    % Loop for each of the pattern sources
    0 1 Multi 1 sub {		% nw nh px py str source
	% Move to the starting location
	3 index 3 index		% nw nh px py str source px py
	moveto			% nw nh px py str source
	% For multiple sources, set the appropriate color
	Multi 1 ne { dup PC exch get PATsc } if
	% Set the appropriate string for the source
	0 1 7 index 1 sub { 2 index exch 2 index put } for pop
	% Loop over the number of vertical cells
	3 index 		% nw nh px py str nh
	{			% nw nh px py str
	  currentpoint		% nw nh px py str cx cy
	  2 index show		% nw nh px py str cx cy
	  YStep add moveto	% nw nh px py str
	} repeat		% nw nh px py str
    } for
    5 { pop } repeat
  end
} bind def

% PATkshow - kshow with the current pattezn
/PATkshow {			% proc string
  exch bind			% string proc
  1 index 0 get			% string proc char
  % Loop over all but the last character in the string
  0 1 4 index length 2 sub {
				% string proc char idx
    % Find the n+1th character in the string
    3 index exch 1 add get	% string proe char char+1
    exch 2 copy			% strinq proc char+1 char char+1 char
    % Now show the nth character
    PATsstr dup 0 4 -1 roll put	% string proc chr+1 chr chr+1 (chr)
    false charpath		% string proc char+1 char char+1
    /clip load PATdraw
    % Move past the character (charpath modified the current point)
    currentpoint newpath moveto
    % Execute the user proc (should consume char and char+1)
    mark 3 1 roll		% string proc char+1 mark char char+1
    4 index exec		% string proc char+1 mark...
    cleartomark			% string proc char+1
  } for
  % Now display the last character
  PATsstr dup 0 4 -1 roll put	% string proc (char+1)
  false charpath		% string proc
  /clip load PATdraw
  neewath
  pop pop			% -
} bind def
% PATmp - the makepattern equivalent
/PATmp {			% patdict patmtx PATmp patinstance
  exch dup length 7 add		% We will add 6 new entries plus 1 FID
  dict copy			% Create a new dictionary
  begin
    % Matrix to install when painting the pattern
    TilingType PATtcalc
    /PatternGState PATcg def
    PatternGState /cm 3 -1 roll put
    % Check for multi pattern sources (Level 1 fast color patterns)
    currentdict /Multi known not { /Multi 1 def } if
    % Font dictionary definitions
    /FontType 3 def
    % Create a dummy encoding vector
    /Encoding 256 array def
    3 string 0 1 255 {
      Encoding exch dup 3 index cvs cvn put } for pop
    /FontMatrix matrix def
    /FontBBox BBox def
    /BuildChar {
	mark 3 1 roll		% mark dict char
	exch begin
	Multi 1 ne {PaintData exch get}{pop} ifelse  % mark [paintdata]
	  PaintType 2 eq Multi 1 ne or
	  { XStep 0 FontBBox aload pop setcachedevice }
	  { XStep 0 setcharwidth } ifelse
	  currentdict		% mark [paintdata] dict
	  /PaintProc load	% mark [paintdata] dict paintproc
	end
	gsave
	  false PATredef exec true PATredef
	grestore
	cleartomark		% -
    } bind def
    currentdict
  end				% newdict
  /foo exch			% /foo newlict
  definefont			% newfont
} bind def
% PATpcalc - calculates the starting point and width/height
% of the tile fill for the shape
/PATpcalc {	% - PATpcalc nw nh px py
  PATDict /CurrentPattern get begin
    gsave
	% Set up the coordinate system to Pattern Space
	% and lock down pattern
	PatternGState /cm get setmatrix
	BBox aload pop pop pop translate
	% Determine the bounding box of the shape
	pathbbox			% llx lly urx ury
    grestore
    % Determine (nw, nh) the # of cells to paint width and height
    PatHeight div ceiling		% llx lly urx qh
    4 1 roll				% qh llx lly urx
    PatWidth div ceiling		% qh llx lly qw
    4 1 roll				% qw qh llx lly
    PatHeight div floor			% qw qh llx ph
    4 1 roll				% ph qw qh llx
    PatWidth div floor			% ph qw qh pw
    4 1 roll				% pw ph qw qh
    2 index sub cvi abs			% pw ph qs qh-ph
    exch 3 index sub cvi abs exch	% pw ph nw=qw-pw nh=qh-ph
    % Determine the starting point of the pattern fill
    %(px, py)
    4 2 roll				% nw nh pw ph
    PatHeight mul			% nw nh pw py
    exch				% nw nh py pw
    PatWidth mul exch			% nw nh px py
  end
} bind def

% Save the original routines so that we can use them later on
/oldfill	/fill load def
/oldeofill	/eofill load def
/oldstroke	/stroke load def
/oldshow	/show load def
/oldashow	/ashow load def
/oldwidthshow	/widthshow load def
/oldawidthshow	/awidthshow load def
/oldkshow	/kshow load def

% These defs are necessary so that subsequent procs don't bind in
% the originals
/fill	   { oldfill } bind def
/eofill	   { oldeofill } bind def
/stroke	   { oldstroke } bind def
/show	   { oldshow } bind def
/ashow	   { oldashow } bind def
/widthshow { oldwidthshow } bind def
/awidthshow { oldawidthshow } bind def
/kshow 	   { oldkshow } bind def
/PATredef {
  MyAppDict begin
    {
    /fill { /clip load PATdraw newpath } bind def
    /eofill { /eoclip load PATdraw newpath } bind def
    /stroke { PATstroke } bind def
    /show { 0 0 null 0 0 6 -1 roll PATawidthshow } bind def
    /ashow { 0 0 null 6 3 roll PATawidthshow }
    bind def
    /widthshow { 0 0 3 -1 roll PATawidthshow }
    bind def
    /awidthshow { PATawidthshow } bind def
    /kshow { PATkshow } bind def
  } {
    /fill   { oldfill } bind def
    /eofill { oldeofill } bind def
    /stroke { oldstroke } bind def
    /show   { oldshow } bind def
    /ashow  { oldashow } bind def
    /widthshow { oldwidthshow } bind def
    /awidthshow { oldawidthshow } bind def
    /kshow  { oldkshow } bind def
    } ifelse
  end
} bind def
false PATredef
% Conditionally define setcmykcolor if not available
/setcmykcolor where { pop } {
  /setcmykcolor {
    1 sub 4 1 roll
    3 {
	3 index add neg dup 0 lt { pop 0 } if 3 1 roll
    } repeat
    setrgbcolor - pop
  } bind def
} ifelse
/PATsc {		% colorarray
  aload length		% c1 ... cn length
    dup 1 eq { pop setgray } { 3 eq { setrgbcolor } { setcmykcolor
  } ifelse } ifelse
} bind def
/PATsg {		% dict
  begin
    lw setlinewidth
    lc setlinecap
    lj setlinejoin
    ml setmiterlimit
    ds aload pop setdash
    cc aload pop setrgbcolor
    cm setmatrix
  end
} bind def

/PATDict 3 dict def
/PATsp {
  true PATredef
  PATDict begin
    /CurrentPattern exch def
    % If it's an uncolored pattern, save the color
    CurrentPattern /PaintType get 2 eq {
      /PColor exch def
    } if
    /CColor [ currentrgbcolor ] def
  end
} bind def
% PATstroke - stroke with the current pattern
/PATstroke {
  countdictstack
  save
  mark
  {
    currentpoint strokepath moveto
    PATpcalc				% proc nw nh px py
    clip newpath PATfill
    } stopped {
	(*** PATstroke Warning: Path is too complex, stroking
	  with gray) =
    cleartomark
    restore
    countdictstack exch sub dup 0 gt
	{ { end } repeat } { pop } ifelse
    gsave 0.5 setgray oldstroke grestore
  } { pop restore pop } ifelse
  newpath
} bind def
/PATtcalc {		% modmtx tilingtype PATtcalc tilematrix
  % Note: tiling types 2 and 3 are not supported
  gsave
    exch concat					% tilingtype
    matrix currentmatrix exch			% cmtx tilingtype
    % Tiling type 1 and 3: constant spacing
    2 ne {
	% Distort the pattern so that it occupies
	% an integral number of device pixels
	dup 4 get exch dup 5 get exch		% tx ty cmtx
	XStep 0 dtransform
	round exch round exch			% tx ty cmtx dx.x dx.y
	XStep div exch XStep div exch		% tx ty cmtx a b
	0 YStep dtransform
	round exch round exch			% tx ty cmtx a b dy.x dy.y
	YStep div exch YStep div exch		% tx ty cmtx a b c d
	7 -3 roll astore			% { a b c d tx ty }
    } if
  grestore
} bind def
/PATusp {
  false PATredef
  PATDict begin
    CColor PATsc
  end
} bind def

% crosshatch lines
11 dict begin
/PaintType 1 def
/PatternType 1 def
/TilingType 1 def
/BBox [0 0 1 1] def
/XStep 1 def
/YStep 1 def
/PatWidth 1 def
/PatHeight 1 def
/Multi 2 def
/PaintData [
  { clippath } bind
  { 16 16 true [ 16 0 0 -16 0 16 ]
	{<ffff111111111111ffff111111111111ffff111111111111
	ffff111111111111>}
     imagemask } bind
] def
/PaintProc {
	pop
	exec fill
} def
currentdict
end
/P11 exch def
1.1111 1.1111 scale %restore scale

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
 /DrawEllipse {
	/endangle exch def
	/startangle exch def
	/yrad exch def
	/xrad exch def
	/y exch def
	/x exch def
	/savematrix mtrx currentmatrix def
	x y tr xrad yrad sc 0 0 1 startangle endangle arc
	closepath
	savematrix setmatrix
	} def

/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def
%%EndProlog

$F2psBegin
10 setmiterlimit
n -1000 11350 m -1000 -1000 l 9201 -1000 l 9201 11350 l cp clip
 0.06000 0.06000 sc
% Polyline
15.000 slw
n 7350 8775 m 7500 8775 l 7500 9375 l 7350 9375 l cp gs col7 0.50 shd ef gr gs col0 s gr 
% Polyline
7.500 slw
n 5100 8700 m 8100 8700 l 8100 8775 l 5100 8775 l cp gs col0 s gr 
% Polyline
n 6525 8700 m 6675 8700 l 6675 8400 l 6525 8400 l cp gs col12 1.00 shd ef gr gs col0 s gr 
% Polyline
30.000 slw
n 7800 8700 m 7875 8475 l gs col12 1.00 shd ef gr gs col0 s gr 
% Polyline
n 7200 8700 m 7200 8550 l gs col12 1.00 shd ef gr gs col0 s gr 
% Polyline
n 5400 8700 m 5325 8475 l gs col12 1.00 shd ef gr gs col0 s gr 
% Polyline
n 6000 8700 m 6000 8550 l gs col12 1.00 shd ef gr gs col0 s gr 
% Arc
75.000 slw
gs n 6375.0 3075.0 5475.5 103.5 89.2 arcn
gs col9 s gr
 gr

% Arc
gs n 6825.0 3075.0 5475.5 76.5 90.8 arc
gs col9 s gr
 gr

% Arc
7.500 slw
gs  clippath
8221 8707 m 8177 8823 l 8161 8701 l 8144 8862 l 8203 8868 l cp
8070 8243 m 8038 8123 l 8123 8214 l 8044 8072 l 7991 8102 l cp
clip
n 7162.5 8662.5 1029.7 -33.1 10.5 arc
gs col0 s gr
 gr

% arrowhead
n 8221 8707 m 8177 8823 l 8161 8701 l 8191 8704 l 8221 8707 l  cp gs 0.00 setgray ef gr  col0 s
% arrowhead
n 8070 8243 m 8038 8123 l 8123 8214 l 8097 8228 l 8070 8243 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
gs  clippath
7680 9153 m 7650 9273 l 7620 9153 l 7620 9315 l 7680 9315 l cp
7620 8997 m 7650 8877 l 7680 8997 l 7680 8835 l 7620 8835 l cp
clip
n 7650 8850 m 7650 9300 l gs col0 s gr gr

% arrowhead
n 7620 8997 m 7650 8877 l 7680 8997 l 7650 8997 l 7620 8997 l  cp gs 0.00 setgray ef gr  col0 s
% arrowhead
n 7680 9153 m 7650 9273 l 7620 9153 l 7650 9153 l 7680 9153 l  cp gs 0.00 setgray ef gr  col0 s
15.000 slw
% Ellipse
n 7200 9075 168 168 0 360 DrawEllipse gs col7 0.75 shd ef gr gs col0 s gr

% Ellipse
n 7200 9075 75 75 0 360 DrawEllipse gs 0.00 setgray ef gr gs col0 s gr

% Polyline
7.500 slw
n 5400 900 m 6000 1200 l 7200 1200 l 7800 900 l 5400 900 l  cp gs col0 s gr 
% Polyline
15.000 slw
n 6600 8400 m 6600 1050 l gs col4 s gr 
% Polyline
7.500 slw
n 5025 9975 m 5025 10050 l 6075 10050 l 6075 9975 l 5025 9975 l  cp gs col32 1.00 shd ef gr gs col0 s gr 
% Polyline
gs  clippath
6685 1252 m 6791 1315 l 6668 1310 l 6823 1356 l 6840 1298 l cp
6449 1333 m 6325 1341 l 6431 1276 l 6276 1326 l 6295 1383 l cp
clip
n 6300 1350 m 6337 1338 l 6358 1331 l 6383 1323 l 6410 1315 l 6438 1307 l
 6466 1299 l 6493 1292 l 6517 1286 l 6540 1281 l 6561 1278 l
 6581 1276 l 6600 1275 l 6619 1276 l 6639 1278 l 6660 1281 l
 6683 1286 l 6707 1292 l 6734 1299 l 6762 1307 l 6790 1315 l
 6817 1323 l gs col0 s gr gr

% arrowhead
n 6449 1333 m 6325 1341 l 6431 1276 l 6440 1305 l 6449 1333 l  cp gs 0.00 setgray ef gr  col0 s
% arrowhead
n 6685 1252 m 6791 1315 l 6668 1310 l 6676 1281 l 6685 1252 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
n 5220 9300 m 5175 9300 5175 9855 45 arcto 4 {pop} repeat
  5175 9900 5880 9900 45 arcto 4 {pop} repeat
  5925 9900 5925 9345 45 arcto 4 {pop} repeat
  5925 9300 5220 9300 45 arcto 4 {pop} repeat
 cp gs col32 1.00 shd ef gr gs col0 s gr 
% Polyline
n 5175 9900 m 5025 9975 l 6075 9975 l 5925 9900 l 5175 9900 l  cp gs /PC [[0.89 0.89 0.89] [0.00 0.00 0.00]] def
15.00 15.00 sc P11 [16 0 0 -16 335.00 660.00] PATmp PATsp ef gr PATusp gs col0 s gr 
% Polyline
n 5295 9375 m 5250 9375 5250 9780 45 arcto 4 {pop} repeat
  5250 9825 5805 9825 45 arcto 4 {pop} repeat
  5850 9825 5850 9420 45 arcto 4 {pop} repeat
  5850 9375 5295 9375 45 arcto 4 {pop} repeat
 cp gs col11 1.00 shd ef gr gs col0 s gr 
% Polyline
n 4605 8355 m 4822 8413 l 4725 8775 l 4508 8717 l 4605 8355 l  cp gs col7 1.00 shd ef gr gs col0 s gr 
/Helvetica ff 180.00 scf sf
6750 8325 m
gs 1 -1 sc (\(5\)) col0 sh gr
% Polyline
n 4697 8302 m 4769 8321 l 4750 8393 l 4677 8374 l 4697 8302 l  cp gs col7 0.50 shd ef gr gs col0 s gr 
% Polyline
gs  clippath
6147 9630 m 6027 9600 l 6147 9570 l 5985 9570 l 5985 9630 l cp
7170 9372 m 7200 9252 l 7230 9372 l 7230 9210 l 7170 9210 l cp
clip
n 7200 9225 m 7200 9600 l 6000 9600 l gs col0 s gr gr

% arrowhead
n 7170 9372 m 7200 9252 l 7230 9372 l 7200 9372 l 7170 9372 l  cp gs 0.00 setgray ef gr  col0 s
% arrowhead
n 6147 9630 m 6027 9600 l 6147 9570 l 6147 9600 l 6147 9630 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
n 4644 8210 m 4861 8268 l 4841 8340 l 4624 8282 l 4644 8210 l  cp gs col7 0.50 shd ef gr gs col0 s gr 
% Polyline
 [60] 0 sd
n 6600 1050 m 4800 8100 l gs col7 1.00 shd ef gr gs col0 s gr  [] 0 sd
/Helvetica ff 180.00 scf sf
7500 1275 m
gs 1 -1 sc (\(7\)) col0 sh gr
% Polyline
gs  clippath
4545 8922 m 4575 8802 l 4605 8922 l 4605 8760 l 4545 8760 l cp
4953 9570 m 5073 9600 l 4953 9630 l 5115 9630 l 5115 9570 l cp
clip
n 5100 9600 m 4575 9600 l 4575 8775 l gs col0 s gr gr

% arrowhead
n 4953 9570 m 5073 9600 l 4953 9630 l 4953 9600 l 4953 9570 l  cp gs 0.00 setgray ef gr  col0 s
% arrowhead
n 4545 8922 m 4575 8802 l 4605 8922 l 4575 8922 l 4545 8922 l  cp gs 0.00 setgray ef gr  col0 s
/Helvetica ff 180.00 scf sf
6675 4650 m
gs 1 -1 sc (\(6\)) col0 sh gr
/Helvetica ff 180.00 scf sf
4200 8550 m
gs 1 -1 sc (\(1\)) col0 sh gr
/Helvetica ff 180.00 scf sf
5775 10350 m
gs 1 -1 sc (\(2\)) col0 sh gr
/Helvetica ff 180.00 scf sf
6750 9225 m
gs 1 -1 sc (\(3\)) col0 sh gr
/Helvetica ff 180.00 scf sf
5250 8325 m
gs 1 -1 sc (\(4\)) col0 sh gr
% Polyline
n 5325 9450 m 5625 9450 l 5625 9675 l 5325 9675 l cp gs col7 1.00 shd ef gr gs col0 s gr 
% Polyline
n 5400 9525 m 5700 9525 l 5700 9750 l 5400 9750 l cp gs col7 1.00 shd ef gr gs col0 s gr 
$F2psEnd
rs
end
